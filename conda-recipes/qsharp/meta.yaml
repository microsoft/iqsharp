{% set version = environ.get('PYTHON_VERSION', '0.0.0.1') %}

package:
  name: qsharp
  version: "{{ version }}"

source:
  - path:    ../../
    folder:  src

requirements:
  build:
    - python
    - jupyter
    - iqsharp={{ version }}

  run:
    - python
    - iqsharp={{ version }}

build:
  script: |
    pwsh -NoProfile src/conda-recipes/qsharp/build.ps1 -Version {{ version }}

test:
  requires:
    - python
    - iqsharp={{ version }}
    - pytest

  source_files:
    - src/conda-recipes/qsharp/test.ps1
    - src/conda-recipes/qsharp/tests.py

  commands:
    # NB: Installing qutip in windows is failing due to
    # https://github.com/conda/conda/issues/11503. Fixing the version of pywin32 fixes it.
    - conda install --yes pywin32=228 # [win]
    # NB: We install QuTiP this way to avoid turning on conda-forge when building
    #     the test environment, as that introduces a lot of potential
    #     conflicts. In particular, we want defaults to take priority over
    #     conda-forge.
    - conda install --yes -c conda-forge qutip
    - powershell -NoProfile src/conda-recipes/qsharp/test.ps1 # [win]
    - pwsh src/conda-recipes/qsharp/test.ps1 # [not win]

about:
  home: https://docs.microsoft.com/azure/quantum
  license: MIT
  summary: Python client for Q#, a domain-specific quantum programming language.
  description: |
    For details on how to get started with Python and Q#, please see the guide at https://docs.microsoft.com/azure/quantum/install-python-qdk.
    You can also try our Quantum Computing Fundamentals learning path (https://aka.ms/learnqc) to get familiar with the basic concepts
    of quantum computing, build quantum programs, and identify the kind of problems that can be solved.
  dev_url: https://github.com/microsoft/iqsharp
  doc_url: https://docs.microsoft.com/azure/quantum/install-python-qdk
