name: Push self-contained images on Dockerfile change

on:
  push:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Docker Login
      run: az acr login -n qdkimages
    - name: Build and push Docker image
      run: |
        $Now = [DateTime]::Now;
        $ImageTag = "${{ github.sha }}"

        $LinuxRepoName = "public/quantum/linux-selfcontained"
        $WindowsRepoName = "public/quantum/windows-selfcontained"

        $LinuxLocalTag = "${LinuxRepoName}:${ImageTag}-linux"
        $WindowsLocalTag = "${WindowsRepoName}:${ImageTag}-windows"

        $LinuxRemoteRepo = "${{ secrets.ACR_REGISTRY }}/${LinuxRepoName}"
        $WindowsRemoteRepo = "${{ secrets.ACR_REGISTRY }}/${WindowsRepoName}"

        docker build images/test-environments/linux --tag $LinuxLocalTag
        docker build images/test-environments/windows --tag $WindowsLocalTag

        docker tag $LinuxLocalTag "${LinuxRemoteRepo}:${ImageTag}-linux"
        docker tag $WindowsLocalTag "${WindowsRemoteRepo}:${ImageTag}-windows"

        docker push "${LinuxRemoteRepo}:${ImageTag}-linux"
        docker push "${WindowsRemoteRepo}:${ImageTag}-windows"

        docker tag $LinuxLocalTag "${LinuxRemoteRepo}:latest"
        docker tag $WindowsLocalTag "${WindowsRemoteRepo}:latest"

        docker push "${LinuxRemoteRepo}:latest"
        docker push "${WindowsRemoteRepo}:latest"
      shell: pwsh
    - name: Wait for images to publish
      run: |
        function Test-Manifest {
          param(
            [string]$OS
          );

          try {
            $manifest = Invoke-RestMethod `
              "https://mcr.microsoft.com/v2/quantum/samples/manifests/${ImageTag}-$OS" `
              -ErrorAction Continue;
            Write-Verbose $manifest;
            return $true;
          } catch {
            return $false;
          }
        }

        $LinuxImageAvailable = $false;
        $WindowsImageAvailable = $false;

        $CheckInterval = 30; # [seconds]
        while (-not $LinuxImageAvailable -and -not $WindowsImageAvailable) {
          if (Test-Manifest -OS "linux" -and Test-Manifest -OS "windows") {
            Write-Host "##[info] Linux and Windows images $ImageTag now available on mcr.microsoft.com, proceeding.";
            $LinuxImageAvailable = $true;
            $WindowsImageAvailable = $true;
          } else if (Test-Manifest -OS "linux") {
            Write-Host "##[info] Linux image $ImageTag now available on mcr.microsoft.com, proceeding."
            Write-Host "##[info] Windows image $ImageTag not yet available on mcr.microsoft.com, waiting $CheckInterval seconds.";
            $LinuxImageAvailable = $true;
          } else if (Test-Manifest -OS "windows") {
            Write-Host "##[info] Windows image $ImageTag now available on mcr.microsoft.com, proceeding.";
            Write-Host "##[info] Linux image $ImageTag not yet available on mcr.microsoft.com, waiting $CheckInterval seconds.";
            $WindowsImageAvailable = $true;
          } else {
            Write-Host "##[info] Neither Linux nor Windows images are available on mcr.microsoft.com, waiting $CheckInterval seconds.";
          }

          Start-Sleep -Seconds $CheckInterval;
        }