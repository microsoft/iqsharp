name: Docker build

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      path:
        required: true
        type: string
      repoName:
        required: true
        type: string
      tagSuffix:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.os }}

    steps:
    - uses: actions/checkout@v1
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Docker Login
      run: az acr login -n qdkimages
    - name: Build and push Docker image
      shell: pwsh
      run: |
        $ImageTag = "${{ github.sha }}-${{ github.run_number }}-${{ inputs.tagSuffix }}"

        $fullRepoName = "public/quantum/${{ inputs.repoName }};
        $remoteRepo = "${{ secrets.ACR_REGISTRY }}/${fullRepoName}";

        docker build ${{ inputs.path }} --tag ${ImageTag};

        docker tag $ImageTag "${remoteRepo}:${ImageTag}";
        docker push "${remoteRepo}:${ImageTag}";

        docker tag $ImageTag "${remoteRepo}:latest"
        docker push "${remoteRepo}:latest"

        Write-Host "Done"

    - name: Wait for images to publish
      run: |
        function Test-Manifest {
          param(
            [string]$ImageTag
          );

          try {
            $manifest = Invoke-RestMethod `
              "https://mcr.microsoft.com/v2/quantum/samples/manifests/${ImageTag}" `
              -ErrorAction Continue;
            Write-Verbose $manifest;
            return $true;
          } catch {
            return $false;
          }
        }

        $ImageTag = "${{ github.sha }}-${{ github.run_number }}-${{ inputs.tagSuffix }}"
        $ImageAvailable = $false
        $CheckInterval = 30; # [seconds]

        while (-not $ImageAvailable) {
          if (Test-Manifest -ImageTag $ImageTag) {
            Write-Host "##[info] $ImageTag now available on mcr.microsoft.com, proceeding.";
            $ImageAvailable = $true;
          } else {
            Write-Host "##[info] Image is not available on mcr.microsoft.com, waiting $CheckInterval seconds.";
          }

          Start-Sleep -Seconds $CheckInterval;
        }
