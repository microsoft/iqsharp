##
# Move build artifacts and create conda environment
##

steps:
##
# Pre-reqs
##
- template: steps-frameworks.yml

- pwsh: |
    "CondaPath: $(CondaPath)" | Write-Host
    "##vso[task.prependpath]$(CondaPath)" | Write-Host
  displayName: Add Conda to Path

# On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# We need to take ownership if we want to update conda or install packages globally
- bash: sudo chown -R $USER $CONDA
  displayName: Take ownership of conda installation
  condition: eq(variables['Agent.OS'], 'Darwin')
  
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: iqsharp
    downloadPath: '$(System.DefaultWorkingDirectory)/artifacts'

- pwsh: Move-Item "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/artifacts/iqsharp/drops" "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/drops"
  displayName: "Move build artifacts to IQ# working directory"

##
# Create and prepare conda environment
##
- pwsh: |
    "##[info]Conda environment variables" | Write-Host
    Get-ChildItem env:CONDA*, env:*VERSION | Format-Table | Out-String | Write-Host

##
# Install conda packages
##
- script: |
    eval "$(CondaShellHook)"
    conda install --yes --quiet --name base conda-build=3.18.8
    conda install --yes --quiet --name conda_env python=3.7 pip setuptools pytest jupyter numpy conda-build=3.18.8 conda-package-handling=1.3.11
  displayName: Install Anaconda packages
  condition: or(eq(variables.OS, 'linux'), eq(variables.OS, 'mac'))

- pwsh: |
    "##[info]Activating conda environment:  $(CondaEnvironmentName)" | Write-Host
    $(CondaShellHook)
    conda activate $(CondaEnvironmentName)
    conda info

    $requirements = Join-Path 'src' 'Python' 'requirements.txt'
    "##[info]Install requirements from: $requirements" | Write-Host
    pip install -r $requirements
  displayName: Install PyPI packages

##
# Running pack-conda.ps1 from a new, independent instance of pwsh
# prevents Azure Pipelines from interpreting the stderr stream from
# conda-build as an exception stream, making it easier to capture
# logging information without causing spurious failures.
#
# Note that any actual failures in conda-build can be detected by examining
# exit codes and by testing the artifacts produced by pack-conda.ps1.
- pwsh: |
    "##[info]Activating conda environment:  $(CondaEnvironmentName)" | Write-Host
    $(CondaShellHook)
    conda activate $(CondaEnvironmentName)
    conda info
    pwsh -NoProfile -Command ./pack-conda.ps1
  displayName: "Packing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'


##
# Test conda packages for each OS
##
- pwsh: |
    "##[info]Activating conda environment:  $(CondaEnvironmentName)" | Write-Host
    $(CondaShellHook)
    conda activate $(CondaEnvironmentName)
    conda info
    pwsh -NoProfile -Command ./test-conda.ps1
  displayName: "Testing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'
  condition: and(succeeded(), ne(variables['Skip.Tests'], 'true'))

##
# Publish build artifacts.
##
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: iqsharp-conda'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: iqsharp-conda
