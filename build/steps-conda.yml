##
# Move build artifacts and create conda environment
##

steps:
##
# Pre-reqs
##
- task: UseDotNet@2
  displayName: 'Use .NET SDK'
  inputs:
    packageType: sdk
    useGlobalJson: true

- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.7
  displayName: 'Use Python 3.7'

- pwsh: |
    "CondaPath: $(CondaPath)" | Write-Host
    "##vso[task.prependpath]$(CondaPath)" | Write-Host
  displayName: Add Conda to Path

# On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# We need to take ownership if we want to update conda or install packages globally
- bash: sudo chown -R $USER $CONDA
  displayName: Take ownership of conda installation
  condition: eq(variables['Agent.OS'], 'Darwin')
  
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: iqsharp
    downloadPath: '$(System.DefaultWorkingDirectory)/artifacts'

- pwsh: Move-Item "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/artifacts/iqsharp/drops" "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/drops"
  displayName: "Move build artifacts to IQ# working directory"

##
# Create and prepare conda environment
##
- pwsh: |
    "##[info]Conda environment variables" | Write-Host
    Get-ChildItem env:CONDA*, env:*VERSION | Format-Table | Out-String | Write-Host

    $CondaLocation=$(Get-Command conda | Select-Object -ExpandProperty Source)
    "##[info]CondaLocation: $CondaLocation" | Write-Host
    "##vso[task.setvariable variable=CondaLocation]$CondaLocation" | Write-Host

    $CondaShellHook="(`& $CondaLocation 'shell.powershell' 'hook') | Out-String | Invoke-Expression"
    "##[info]CondaShellHook: $CondaShellHook" | Write-Host
    "##vso[task.setvariable variable=CondaShellHook]$CondaShellHook" | Write-Host

    $CondaEnvironmentName='conda_env'
    "##vso[task.setvariable variable=CondaEnvironmentName]$CondaEnvironmentName" | Write-Host

    "##[info]Creating conda environment" | Write-Host
    conda create --yes --name $CondaEnvironmentName

    "##[info]Installing conda packages" | Write-Host
    conda install --yes --name $CondaEnvironmentName python=3.7 pip setuptools pytest jupyter numpy conda-build=3.18.8 conda-package-handling=1.3.11
  displayName: Create and setup conda environment

##
# Running pack-conda.ps1 from a new, independent instance of pwsh
# prevents Azure Pipelines from interpreting the stderr stream from
# conda-build as an exception stream, making it easier to capture
# logging information without causing spurious failures.
#
# Note that any actual failures in conda-build can be detected by examining
# exit codes and by testing the artifacts produced by pack-conda.ps1.
- pwsh: |
    "##[info]Activating conda environment:  $(CondaEnvironmentName)" | Write-Host
    $(CondaShellHook)
    conda activate $(CondaEnvironmentName)
    conda info
    pwsh -NoProfile -Command ./pack-conda.ps1
  displayName: "Packing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'


##
# Test conda packages for each OS
##
- pwsh: |
    "##[info]Activating conda environment:  $(CondaEnvironmentName)" | Write-Host
    $(CondaShellHook)
    conda activate $(CondaEnvironmentName)
    conda info
    pwsh -NoProfile -Command ./test-conda.ps1
  displayName: "Testing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'
  condition: and(succeeded(), ne(variables['Skip.Tests'], 'true'))

##
# Publish build artifacts.
##
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: iqsharp-conda'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: iqsharp-conda