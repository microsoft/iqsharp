##
# Move build artifacts and create conda environment
##

steps:
##
# Pre-reqs
##
- task: UseDotNet@2
  displayName: 'Use .NET SDK'
  inputs:
    packageType: sdk
    useGlobalJson: true

- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.9
  displayName: 'Use Python 3.9'

- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: iqsharp
    downloadPath: '$(System.DefaultWorkingDirectory)/artifacts'

- pwsh: Move-Item "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/artifacts/iqsharp/drops" "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/drops"
  displayName: "Move build artifacts to IQ# working directory"

##
# Create conda environment
##
- pwsh: |
    $(CondaShellHook)
    conda create --yes --quiet --name conda_env
  displayName: Create Anaconda environment pwsh

##
# Install packages
##
- pwsh: |
    $(CondaShellHook)
    conda install --yes --quiet --name base conda-build=4.13.0
    conda install --yes --quiet --name conda_env python=3.9 pip conda-build conda-package-handling
  displayName: Install Anaconda packages

- pwsh: |
    $(CondaShellHook)
    conda activate conda_env
    conda info
    $requirements = Join-Path 'src' 'Python' 'requirements.txt'
    pip install -r $requirements
  displayName: Install pypi packages

##
# Pack conda packages for each OS
##
# Running pack-conda.ps1 from a new, independent instance of pwsh
# prevents Azure Pipelines from interpreting the stderr stream from
# conda-build as an exception stream, making it easier to capture
# logging information without causing spurious failures.
#
# Note that any actual failures in conda-build can be detected by examining
# exit codes and by testing the artifacts produced by pack-conda.ps1.
- pwsh: |
    $(CondaShellHook)
    conda activate conda_env
    conda info
    pwsh -NoProfile -Command ./pack-conda.ps1
  displayName: "Packing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'


##
# Test conda packages for each OS
##
- pwsh: |
    $(CondaShellHook)
    conda activate conda_env
    conda info
    pwsh -NoProfile -Command ./test-conda.ps1
  displayName: "Testing IQ# packages"
  workingDirectory: '$(System.DefaultWorkingDirectory)/build'
  condition: and(succeeded(), ne(variables['Skip.Tests'], 'true'))

##
# Publish build artifacts.
##
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: iqsharp-conda'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: iqsharp-conda