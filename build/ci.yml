name: $(Build.Major).$(Build.Minor).$(DayOfMonth)$(rev:rr)

trigger: none

pr:
- main
- feature/*
- features/*
- release/*

schedules:
- cron: "0 9 * * Sat"
  displayName: 'Build for Component Governance'
  branches:
    include:
    - main
  always: true

variables:
  Build.Major: 0
  Build.Minor: 18
  Drops.Dir: $(Build.ArtifactStagingDirectory)/drops
  IQSharp.Hosting.Env: 'build-agent-iqsharp'
  agent.preferPowerShellOnContainers: false

jobs:
- job: "prototype"
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-18.04'
      mac:
        imageName: 'macOS-latest'
      windows:
        imageName: 'windows-latest'
  variables:
    CondaShellHook: (& $(Get-Command conda | Select-Object -ExpandProperty Source) 'shell.powershell' 'hook') | Out-String | Invoke-Expression
  pool: 
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.9
    displayName: 'Use Python 3.9'
  - pwsh: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH
  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  # We need to take ownership if we want to update conda or install packages globally
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
    condition: eq(variables['Agent.OS'], 'Darwin')
  - pwsh: |
      "CondaPath: " | Write-Host
      Get-Command conda  | Write-Host
      "CondaShellHook: $(CondaShellHook)" | Write-Host
      $(CondaShellHook)
      conda create --yes --quiet --name conda_env
    displayName: Create Anaconda environment pwsh
  - pwsh: |
      "CondaShellHook: $(CondaShellHook)" | Write-Host
      $(CondaShellHook)
      conda install --yes --quiet --name base conda-build=4.13.0
      conda install --yes --quiet --name conda_env python=3.9 pip conda-build conda-package-handling
    displayName: Install Anaconda packages
  - pwsh: |
      "CondaShellHook: $(CondaShellHook)" | Write-Host
      $(CondaShellHook)
      conda activate conda_env
      conda info
      $requirements = Join-Path 'src' 'Python' 'requirements.txt'
      pip install -r $requirements
    displayName: Install pypi packages

- job: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps.yml
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

- job: "test_selenium"
  pool:
    vmImage: 'windows-2019'
  steps:
  - template: steps-selenium.yml
  condition: ne(variables['Skip.Tests'], 'true')

- job: "pack_selfcontained"
  dependsOn: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps-selfcontained.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda_macos"
  dependsOn: "pack_selfcontained"
  pool:
    vmImage: 'macOS-latest'
  variables:
    CondaShellHook: (& '/usr/local/bin/conda' 'shell.powershell' 'hook') | Out-String | Invoke-Expression
  steps:
  - template: steps-conda.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda_linux"
  dependsOn: "pack_selfcontained"
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    CondaShellHook: (& '/miniconda/bin/conda' 'shell.powershell' 'hook') | Out-String | Invoke-Expression
  container: mcr.microsoft.com/quantum/linux-selfcontained:latest
  steps:
  - template: steps-conda.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda_windows"
  dependsOn: "pack_selfcontained"
  pool:
    vmImage: 'windows-latest'
  variables:
    CondaShellHook: (& 'C:\Miniconda3\Scripts\conda.exe' 'shell.powershell' 'hook') | Out-String | Invoke-Expression
  container: mcr.microsoft.com/quantum/windows-selfcontained:latest
  steps:
  - template: steps-conda.yml
  condition: ne(variables['Enable.Conda'], 'false')
