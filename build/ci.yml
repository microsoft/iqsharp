name: $(Build.Major).$(Build.Minor).$(DayOfMonth)$(rev:rr)

trigger: none

pr:
- main
- feature/*
- features/*
- release/*

schedules:
- cron: "0 9 * * Sat"
  displayName: 'Build for Component Governance'
  branches:
    include:
    - main
  always: true

variables:
  Build.Major: 0
  Build.Minor: 18
  Drops.Dir: $(Build.ArtifactStagingDirectory)/drops
  IQSharp.Hosting.Env: 'build-agent-iqsharp'
  agent.preferPowerShellOnContainers: false

jobs:
- job: "prototype"
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-18.04'
      mac:
        imageName: 'macOS-latest'
      windows:
        imageName: 'windows-latest'
  variables:
    CondaEnvironmentName: conda_env
  pool: 
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.9
    displayName: 'Use Python 3.9'
  - pwsh: |
      $env:PATH="$env:CONDA\Scripts;$env:PATH"
      $CondaLocation=$(Get-Command conda | Select-Object -ExpandProperty Source)
      $CondaShellHook="(`& `$(Get-Command conda | Select-Object -ExpandProperty Source) 'shell.powershell' 'hook') | Out-String | Invoke-Expression"
      
      "##vso[task.setvariable variable=CondaLocation]$CondaLocation" | Write-Host
      "##vso[task.setvariable variable=CondaShellHook]$CondaShellHook" | Write-Host
      "##vso[task.prependpath]$env:CONDA\Scripts" | Write-Host
    displayName: Add Conda variables to environment
  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  # We need to take ownership if we want to update conda or install packages globally
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
    condition: eq(variables['Agent.OS'], 'Darwin')
  - pwsh: |
      "##[info]Conda environment variables" | Write-Host
      Get-ChildItem env:CONDA*, env:*VERSION | Format-Table | Out-String | Write-Host

      "##[info]Creating conda environment" | Write-Host
      conda create --yes --quiet --name $(CondaEnvironmentName)

      "##[info]Installing conda packages" | Write-Host
      conda install --yes --quiet --name $(CondaEnvironmentName) python=3.9 pip conda-build conda-package-handling
    displayName: Create and setup $(CondaEnvironmentName)
  - pwsh: |
      $(CondaShellHook)
      conda activate $(CondaEnvironmentName)
      conda info
      $requirements = Join-Path 'src' 'Python' 'requirements.txt'
      pip install -r $requirements
    displayName: Install PyPI packages

- job: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps.yml
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

- job: "test_selenium"
  pool:
    vmImage: 'windows-2019'
  steps:
  - template: steps-selenium.yml
  condition: ne(variables['Skip.Tests'], 'true')

- job: "pack_selfcontained"
  dependsOn: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps-selfcontained.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda"
  dependsOn: "pack_selfcontained"
  condition: ne(variables['Enable.Conda'], 'false')
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-latest'
        containerName: mcr.microsoft.com/quantum/linux-selfcontained:latest
      mac:
        imageName: 'macOS-latest'
        containerName: ''
      windows:
        imageName: 'windows-latest'
        containerName: mcr.microsoft.com/quantum/windows-selfcontained:latest
  variables:
    CondaEnvironmentName: conda_env
  pool:
    vmImage: $(imageName)
  container: $(containerName)
  steps:
  - template: steps-conda.yml
